package com.paymentchain.customer.controller;
import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.JsonNode;
import com.paymentchain.customer.entities.Customer;
import com.paymentchain.customer.entities.CustomerProducts;
import com.paymentchain.customer.repository.CustomerRepository;

import io.netty.channel.ChannelOption;
import io.netty.channel.epoll.EpollChannelOption;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.WriteTimeoutHandler;
import reactor.netty.http.client.HttpClient;

@RestController
@RequestMapping("/customer") 
public class CustomerController {

    @Autowired
    private CustomerRepository customerRepository;
    
    @Autowired
    private Environment environment;
    
    @Autowired
    private WebClient.Builder webClientBuilder;
    
    /*private final WebClient.Builder webClientBuilder;
    
    public CustomerController(WebClient.Builder webClientBuilder) {
    	this.webClientBuilder=webClientBuilder;
    }*/
    
    HttpClient httpClient = HttpClient.create()
            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)
            .option(ChannelOption.SO_KEEPALIVE, true)
            .option(EpollChannelOption.TCP_KEEPIDLE, 300)
            .option(EpollChannelOption.TCP_KEEPINTVL, 60)
            .responseTimeout(Duration.ofSeconds(1))
            .doOnConnected(conn ->
                    conn.addHandlerLast(new ReadTimeoutHandler(5, TimeUnit.SECONDS)) 
                        .addHandlerLast(new WriteTimeoutHandler(5, TimeUnit.SECONDS)));

   
    @GetMapping("/check")
    public String check() {
        return environment.getProperty("customer.activeprofileName");
    }
    
    @GetMapping()
    public List<Customer> list() {
        return customerRepository.findAll();
    }   
    
    @GetMapping("/{id}")
    public ResponseEntity<?> get(@PathVariable long id) {
         Optional<Customer> customer = customerRepository.findById(id);
        if (customer.isPresent()) {
            return new ResponseEntity<>(customer.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<?> put(@PathVariable long id, @RequestBody Customer input) {
        return customerRepository.findById(id)
            .map(existingCustomer -> {
                existingCustomer.setName(input.getName());
                existingCustomer.setPhone(input.getPhone());
                Customer saved = customerRepository.save(existingCustomer);
                return new ResponseEntity<>(saved, HttpStatus.OK);
            })
            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }
    
    @PostMapping
    public ResponseEntity<?> post(@RequestBody Customer input) { 	
    	input.getProducts().forEach(product -> product.setCustomer(input));  	
        Customer save = customerRepository.save(input);
        return ResponseEntity.ok(save);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable long id) {
         customerRepository.deleteById(id);
         return new ResponseEntity<>(HttpStatus.OK);
    }
    
    @GetMapping("/full")
    public Customer getByCode(@RequestParam String code) {
    	Customer customer = customerRepository.findByCode(code);
    	List<CustomerProducts> products = customer.getProducts();
    	products.forEach(x->{
    		x.setProductName(getProductName(x.getId()));
    		});
    	List<?> transactions = getTransactions(customer.getIban());
    	customer.setTransactions(transactions);
    	
    	return customer;
    }
    
    private String getProductName(Long id) {
    	WebClient build=webClientBuilder.clientConnector(new ReactorClientHttpConnector(httpClient))
    			.baseUrl("http://BUSINESSDOMAIN-PRODUCTS/products")
    			.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
    			.build();
    	
    	return build.method(HttpMethod.GET).uri("/"+id)
    			.retrieve()
    			.bodyToMono(JsonNode.class)
    			.map(jsonNode -> jsonNode.get("name").asText())
    			.block();
    }
    
    private List<?> getTransactions(String iban) {
    	WebClient build=webClientBuilder.clientConnector(new ReactorClientHttpConnector(httpClient))
    			.baseUrl("http://BUSINESSDOMAIN-TRANSACTIONS/transactions")
    			.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
    			.build();
    	
    	List<?> transactions =  build.method(HttpMethod.GET).uri(uriBuilder->uriBuilder
    			.path("/getAccount")
    			.queryParam("iban",iban)
    			.build())
				.retrieve().bodyToFlux(Object.class).collectList()
    			.block();
    	
    	return transactions;
    }
}